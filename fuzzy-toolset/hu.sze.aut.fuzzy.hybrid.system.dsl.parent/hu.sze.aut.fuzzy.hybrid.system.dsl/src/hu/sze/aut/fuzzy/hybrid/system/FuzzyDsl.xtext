// automatically generated by Xtext
grammar hu.sze.aut.fuzzy.hybrid.system.FuzzyDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/hybridfuzzymodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


HybridSystem returns System:
	SimpleSystem
;

SimpleSystem returns System:
	{System}
	'hybridsystem' name=EString (',''rate'':'rate=DOUBLE)?
	'locations'':'
		location+=Location (location+=Location)*
	'end'
	('fuzzysetcollection'
		fuzzyset+=FuzzySet (fuzzyset+=FuzzySet)*
	'endfuzzyset')?
	'ruleset'
		ruleset+=RuleSet(ruleset+=RuleSet)*
	'endruleset'
	'actions'
		actiondefinition+=Action(actiondefinition+=Action)*
	'endactions'
	('variables'
		variable+=ConVariable (variable+=ConVariable)*
	'endvariables'
	)?
	'transitions'
		transition+=Transition(transition+=Transition)*
	'endtransitions'
	'begin'
		'startlocation' startlocation=[Location|EString]
		'errorlocation' errorlocation=[Location|EString]
	'endsystem'
;

ConVariable returns Variable:
	ContinuousVariable | Clock
;

ContinuousVariable returns Variable:
	{Variable}
	'variable' name=EString
;

Clock returns Clock:
	{Clock}
	'clock' name=EString
;

FuzzySet returns FuzzySet:
	{FuzzySet}
	'fuzzysets' name=EString
		membershipfunction+=MembershipFunction(membershipfunction+=MembershipFunction)*
	'end'
;

MembershipFunction returns MembershipFunction:
	Lambda | Trapezoid | Alpha
;

Alpha returns Alpha:
	{Alpha}
	'alpha' name=EString 'on' variable=[Variable|EString] '(' a=DOUBLE',' b=DOUBLE ')'
;

Lambda returns Lambda:
	{Lambda}
	'lambda' name=EString 'on' variable=[Variable|EString] '(' a=DOUBLE','u=DOUBLE','b=DOUBLE')'
;

Trapezoid returns Trapezoid:
	{Trapezoid}
	'trapezoid' name=EString 'on' variable=[Variable|EString] '(' a=DOUBLE','b=DOUBLE')'
;


RuleSet returns RuleSet:
	DiscreteEventRuleset | ContinuousEventRuleSet;
	
DiscreteEventRuleset returns DiscreteEventRuleset:
	{DiscreteEventRuleset}
	'discreteeventruleset' name=EString 
		('discreteevents'
			discreteevent+=DiscreteEvent(',' discreteevent+=DiscreteEvent)*)?
		'endevents'		
	'endruleset'
	;
	
ContinuousEventRuleSet returns ContinuousEventRuleset:
	{ContinuousEventRuleset}
	'continouseventruleset' name=EString 
		'rules'
			rule+=Rule(rule+=Rule)*
		'endrules'
	'endruleset'
;
	
DiscreteEvent returns DiscreteEvent:
	{DiscreteEvent}
	'discreteevent' name=EString
;

Rule returns Rule:
	FuzzyRule | CrispGuard
;

CrispGuard returns CrispGuard:
	{CrispGuard}
	'crisprule' name=EString ':='relationexpression=RelationExpression
;

RelationExpression returns RelationExpression:
	GreaterExpression | LessExpression
;

GreaterExpression returns GreaterExpression:
	{GreaterExpression}
	variable=[Variable|EString] '>' c=DOUBLE
;

LessExpression returns LessExpression:
	{LessExpression}
	variable=[Variable|EString] '<' c=DOUBLE
;

FuzzyRule returns FuzzyRule:
	{FuzzyRule}
	'fuzzyrule'
	'end'
;


Location returns Location:
	{Location}
	'location' name=EString
	  ('do' cyclicaction=[ActionDefinition|EString])? 
	'end'
;

Transition returns Transition:
	{Transition}
	'transition' name=EString':' source=[Location|EString]'->'target=[Location|EString] 'trigger' trigger=[DiscreteEvent|EString] 
		('action' actiondefinition=[ActionDefinition|EString])? ('invariant' invariant=[Rule|EString])?
;

Action returns ActionDefinition:
	{ActionDefinition}
	'action'
	'name' name=EString ('reset' reset=[Clock|EString])?
;






terminal DOUBLE returns ecore::EDouble: 
    ('0'..'9')+'.'('0'..'9')+;

EString returns ecore::EString:
	STRING | ID;
