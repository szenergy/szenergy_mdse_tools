/*
 * generated by Xtext 2.21.0
 */
package hu.sze.aut.fuzzy.hybrid.system.serializer;

import com.google.inject.Inject;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.ActionDefinition;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Alpha;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Clock;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.ContinuousEventRuleset;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.CrispGuard;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.DiscreteEvent;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.DiscreteEventRuleset;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.FuzzyRule;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.FuzzySet;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.GreaterExpression;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.HybridfuzzymodelPackage;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Lambda;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.LessExpression;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Location;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Transition;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Trapezoid;
import hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.Variable;
import hu.sze.aut.fuzzy.hybrid.system.services.FuzzyDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FuzzyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FuzzyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HybridfuzzymodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HybridfuzzymodelPackage.ACTION_DEFINITION:
				sequence_Action(context, (ActionDefinition) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.ALPHA:
				sequence_Alpha(context, (Alpha) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.CLOCK:
				sequence_Clock(context, (Clock) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.CONTINUOUS_EVENT_RULESET:
				sequence_ContinuousEventRuleSet(context, (ContinuousEventRuleset) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.CRISP_GUARD:
				sequence_CrispGuard(context, (CrispGuard) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.DISCRETE_EVENT:
				sequence_DiscreteEvent(context, (DiscreteEvent) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.DISCRETE_EVENT_RULESET:
				sequence_DiscreteEventRuleset(context, (DiscreteEventRuleset) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.FUZZY_RULE:
				sequence_FuzzyRule(context, (FuzzyRule) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.FUZZY_SET:
				sequence_FuzzySet(context, (FuzzySet) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.GREATER_EXPRESSION:
				sequence_GreaterExpression(context, (GreaterExpression) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.LAMBDA:
				sequence_Lambda(context, (Lambda) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.LESS_EXPRESSION:
				sequence_LessExpression(context, (LessExpression) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.SYSTEM:
				sequence_SimpleSystem(context, (hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.System) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.TRAPEZOID:
				sequence_Trapezoid(context, (Trapezoid) semanticObject); 
				return; 
			case HybridfuzzymodelPackage.VARIABLE:
				sequence_ContinuousVariable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns ActionDefinition
	 *
	 * Constraint:
	 *     (name=EString reset=[Clock|EString]?)
	 */
	protected void sequence_Action(ISerializationContext context, ActionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MembershipFunction returns Alpha
	 *     Alpha returns Alpha
	 *
	 * Constraint:
	 *     (name=EString variable=[Variable|EString] a=DOUBLE b=DOUBLE)
	 */
	protected void sequence_Alpha(ISerializationContext context, Alpha semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.ALPHA__A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.ALPHA__A));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.ALPHA__B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.ALPHA__B));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlphaAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAlphaAccess().getVariableVariableEStringParserRuleCall_4_0_1(), semanticObject.eGet(HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE, false));
		feeder.accept(grammarAccess.getAlphaAccess().getADOUBLETerminalRuleCall_6_0(), semanticObject.getA());
		feeder.accept(grammarAccess.getAlphaAccess().getBDOUBLETerminalRuleCall_8_0(), semanticObject.getB());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConVariable returns Clock
	 *     Clock returns Clock
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Clock(ISerializationContext context, Clock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClockAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleSet returns ContinuousEventRuleset
	 *     ContinuousEventRuleSet returns ContinuousEventRuleset
	 *
	 * Constraint:
	 *     (name=EString rule+=Rule rule+=Rule*)
	 */
	protected void sequence_ContinuousEventRuleSet(ISerializationContext context, ContinuousEventRuleset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConVariable returns Variable
	 *     ContinuousVariable returns Variable
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ContinuousVariable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContinuousVariableAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns CrispGuard
	 *     CrispGuard returns CrispGuard
	 *
	 * Constraint:
	 *     (name=EString relationexpression=RelationExpression)
	 */
	protected void sequence_CrispGuard(ISerializationContext context, CrispGuard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.RULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.RULE__NAME));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.CRISP_GUARD__RELATIONEXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.CRISP_GUARD__RELATIONEXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCrispGuardAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCrispGuardAccess().getRelationexpressionRelationExpressionParserRuleCall_4_0(), semanticObject.getRelationexpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleSet returns DiscreteEventRuleset
	 *     DiscreteEventRuleset returns DiscreteEventRuleset
	 *
	 * Constraint:
	 *     (name=EString (discreteevent+=DiscreteEvent discreteevent+=DiscreteEvent*)?)
	 */
	protected void sequence_DiscreteEventRuleset(ISerializationContext context, DiscreteEventRuleset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiscreteEvent returns DiscreteEvent
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_DiscreteEvent(ISerializationContext context, DiscreteEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.DISCRETE_EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.DISCRETE_EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscreteEventAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns FuzzyRule
	 *     FuzzyRule returns FuzzyRule
	 *
	 * Constraint:
	 *     {FuzzyRule}
	 */
	protected void sequence_FuzzyRule(ISerializationContext context, FuzzyRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FuzzySet returns FuzzySet
	 *
	 * Constraint:
	 *     (name=EString membershipfunction+=MembershipFunction membershipfunction+=MembershipFunction*)
	 */
	protected void sequence_FuzzySet(ISerializationContext context, FuzzySet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationExpression returns GreaterExpression
	 *     GreaterExpression returns GreaterExpression
	 *
	 * Constraint:
	 *     (variable=[Variable|EString] c=DOUBLE)
	 */
	protected void sequence_GreaterExpression(ISerializationContext context, GreaterExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__C) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__C));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreaterExpressionAccess().getVariableVariableEStringParserRuleCall_1_0_1(), semanticObject.eGet(HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE, false));
		feeder.accept(grammarAccess.getGreaterExpressionAccess().getCDOUBLETerminalRuleCall_3_0(), semanticObject.getC());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MembershipFunction returns Lambda
	 *     Lambda returns Lambda
	 *
	 * Constraint:
	 *     (name=EString variable=[Variable|EString] a=DOUBLE u=DOUBLE b=DOUBLE)
	 */
	protected void sequence_Lambda(ISerializationContext context, Lambda semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__A));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__U) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__U));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.LAMBDA__B));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLambdaAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLambdaAccess().getVariableVariableEStringParserRuleCall_4_0_1(), semanticObject.eGet(HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE, false));
		feeder.accept(grammarAccess.getLambdaAccess().getADOUBLETerminalRuleCall_6_0(), semanticObject.getA());
		feeder.accept(grammarAccess.getLambdaAccess().getUDOUBLETerminalRuleCall_8_0(), semanticObject.getU());
		feeder.accept(grammarAccess.getLambdaAccess().getBDOUBLETerminalRuleCall_10_0(), semanticObject.getB());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationExpression returns LessExpression
	 *     LessExpression returns LessExpression
	 *
	 * Constraint:
	 *     (variable=[Variable|EString] c=DOUBLE)
	 */
	protected void sequence_LessExpression(ISerializationContext context, LessExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__C) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__C));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLessExpressionAccess().getVariableVariableEStringParserRuleCall_1_0_1(), semanticObject.eGet(HybridfuzzymodelPackage.Literals.RELATION_EXPRESSION__VARIABLE, false));
		feeder.accept(grammarAccess.getLessExpressionAccess().getCDOUBLETerminalRuleCall_3_0(), semanticObject.getC());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (name=EString cyclicaction=[ActionDefinition|EString]?)
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HybridSystem returns System
	 *     SimpleSystem returns System
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         rate=DOUBLE? 
	 *         location+=Location 
	 *         location+=Location* 
	 *         (fuzzyset+=FuzzySet fuzzyset+=FuzzySet*)? 
	 *         ruleset+=RuleSet 
	 *         ruleset+=RuleSet* 
	 *         actiondefinition+=Action 
	 *         actiondefinition+=Action* 
	 *         (variable+=ConVariable variable+=ConVariable*)? 
	 *         transition+=Transition 
	 *         transition+=Transition* 
	 *         startlocation=[Location|EString] 
	 *         errorlocation=[Location|EString]
	 *     )
	 */
	protected void sequence_SimpleSystem(ISerializationContext context, hu.sze.aut.fuzzy.hybrid.system.model.hybridfuzzymodel.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         source=[Location|EString] 
	 *         target=[Location|EString] 
	 *         trigger=[DiscreteEvent|EString] 
	 *         actiondefinition=[ActionDefinition|EString]? 
	 *         invariant=[Rule|EString]?
	 *     )
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MembershipFunction returns Trapezoid
	 *     Trapezoid returns Trapezoid
	 *
	 * Constraint:
	 *     (name=EString variable=[Variable|EString] a=DOUBLE b=DOUBLE)
	 */
	protected void sequence_Trapezoid(ISerializationContext context, Trapezoid semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.TRAPEZOID__A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.TRAPEZOID__A));
			if (transientValues.isValueTransient(semanticObject, HybridfuzzymodelPackage.Literals.TRAPEZOID__B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HybridfuzzymodelPackage.Literals.TRAPEZOID__B));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrapezoidAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrapezoidAccess().getVariableVariableEStringParserRuleCall_4_0_1(), semanticObject.eGet(HybridfuzzymodelPackage.Literals.MEMBERSHIP_FUNCTION__VARIABLE, false));
		feeder.accept(grammarAccess.getTrapezoidAccess().getADOUBLETerminalRuleCall_6_0(), semanticObject.getA());
		feeder.accept(grammarAccess.getTrapezoidAccess().getBDOUBLETerminalRuleCall_8_0(), semanticObject.getB());
		feeder.finish();
	}
	
	
}
