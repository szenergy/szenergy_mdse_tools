// automatically generated by Xtext
grammar hu.sze.aut.diffrobot.dse.DiffRobotDsl with org.eclipse.xtext.common.Terminals

import "http://jkk.sze.hu/diffrobot" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Robot returns Robot:
	{Robot}
	'robot'
	name=EString
	'{'
		('rootaxis' rootaxis=[WheelAxis|EString])?
		('wheelaxes' '{' wheelaxis+=WheelAxis ( "," wheelaxis+=WheelAxis)* '}' )?
		('kinematicparameters' kinematicparameters=KinematicParameters)?
		('sensorparameters' sensorparameters=SensorParameters)?
		('wheelparameters' wheelparameters+=WheelParameters  (',' wheelparameters+=WheelParameters)*)?
		('hull' hull=HullComponent)?
		('dynamicparameters' dynamicparameters=DynamicParameters)?
		('sensor' '{' sensor+=Sensor ( "," sensor+=Sensor)* '}' )?
		('simulationparameters' '{' simulationparameters=SimulationParameters '}')?
	'}';

SimulationParameters returns SimulationParameters:
	{SimulationParameters}
	
	'simulation_control_plugin_path' simulation_control_plugin=EString
;

SensorParameters returns SensorParameters:
	{SensorParameters}
	sensorparameter+=SensorParameter(','sensorparameter+=SensorParameter)*
;

SensorParameter returns SensorParameter:
	CameraParameter | LaserParameter
;

CameraParameter returns CameraParameter:
	{CameraParameter}
	'cameraparameter' name=EString 
	'{'
		'update_rate' update_rate=EInt
		'width' width=EInt
		'height' height=EInt
		'fov' fov=EDouble
		'clip_near' clip_near=EDouble
		'clip_far' clip_far=EDouble
	'}'
;

LaserParameter returns LaserParameter:
	{LaserParameter}
	'laserparameter' name=EString
	'{'
		'update_rate' update_rate=EInt
		'min_range' min_range=EDouble
		'max_range' max_range=EDouble
		'range_resolution' range_resolution=EDouble
		'min_angle' min_angle=EDouble
		'max_angle' max_angle=EDouble
		'angle_resolution' angle_resolution=EDouble
		'samples' samples=EInt
	'}'
;


Sensor returns Sensor:
	Camera | LaserScanner | StereoCamera;





WheelAxis returns WheelAxis:
	{WheelAxis}
	'axis' name=EString
	'{'	   
		('wheels' wheels=EInt)?
		('axis' axis=AxisOrientation)?
		('length' length=EDouble)?
		('wheelparameters' wheelparameters=[WheelParameters|EString])?
		('axislocation' axislocation=AxisLocation)?
	'}';

KinematicParameters returns KinematicParameters:
	{KinematicParameters}
	'KinematicParameters'
	;

WheelParameters returns WheelParameters:
	{WheelParameters}
	'wheelparameter' name=EString
	'{'
		('radius' radius=EDouble)?
		('width' width=EDouble)?
		('mass' mass=EDouble)?
	'}';

EString returns ecore::EString:
	STRING | ID;

HullComponent returns HullComponent:
	{HullComponent}
	'{'
		('mass' mass=EDouble)?
		('width' width=EDouble)?
		('depth' depth=EDouble)?
		('height' height=EDouble)?
		('mesh' '{' mesh=Mesh '}' )?
	'}';

DynamicParameters returns DynamicParameters:
	{DynamicParameters}
	'DynamicParameters'
	;

EInt returns ecore::EInt:
	'-'? INT;

enum AxisOrientation returns AxisOrientation:
				HORIZONTAL = 'HORIZONTAL' | VERTICAL = 'VERTICAL';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

AxisLocation returns AxisLocation:
	{AxisLocation}
	'{'
		('displacement' displacement=Displacement)?
		('rotation' rotation=Rotation)?
	'}';

Displacement returns Displacement:
	{Displacement}
	'{'
		('x' x=EDouble)?
		('y' y=EDouble)?
		('z' z=EDouble)?
	'}';

Rotation returns Rotation:
	{Rotation}
	'{'
		('roll' roll=EDouble)?
		('pitch' pitch=EDouble)?
		('yaw' yaw=EDouble)?
	'}';

Mesh returns Mesh:
	{Mesh}
	name=EString
	'{'
		('path' path=EString)?
		('package' package=EString)?
	'}';

Camera returns Camera:
	{Camera}
	'camera' name=EString
	'{'
		'cameraparameter' cameraparameter=[CameraParameter|EString]
		'displacement' displacement=Displacement
	'}'
	;

StereoCamera returns StereoCamera:
	{StereoCamera}
	'stereocamera' name=EString
	'{'
		'cameraparameter' cameraparameter=[CameraParameter|EString]
		'displacement' displacement=Displacement
	'}'
;

LaserScanner returns LaserScanner:
	{LaserScanner}
	'laser' name=EString
	'{'
		'laserparameter' laserparameter=[LaserParameter|EString]
		'displacement' displacement=Displacement
	'}'
	;
	
